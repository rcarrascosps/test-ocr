# This is a basic workflow to help you get started with Actions

name: CI - demo mulesoft flex-gateway

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  validar-yaml:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a set of commands using the runners shell
      - name: Validar YAML
        uses: GrantBirki/json-yaml-validate@v2.6.0
        with:
          files: "./config.yaml"
          comment: "true"

      - name: Mostrar contenido del archivo
        run: cat config.yaml 
      
      - name: Convertir a base 64
        run: 
          cat config.yaml | base64 > config.txt
      
      - name: Mostrar base 64
        run: cat config.txt
      
  Oc-openshift-Install:
    runs-on: ubuntu-latest
    needs: validar-yaml
    if: ${{ success()}}

    steps: 
      - name: Install oc openshift
        uses: redhat-actions/oc-installer@v1
        with:
          oc_version: '4.6'
      
  Login:
    runs-on: ubuntu-20.04
    needs: Oc-openshift-Install
    if: ${{ success() }}
    
    steps:
      - uses: actions/checkout@v4 
      - name: Add hosts to /etc/hosts
        run: |
            sudo echo "64.23.160.96 api.crc.testing oauth-openshift.apps-crc.testing console-openshift-console.apps-crc.testing default-route-openshift-image-registry.apps-crc.testing flex-route-flex.apps-crc.testing downloads-openshift-console.apps-crc" | sudo tee -a /etc/hosts
            
      - name: Authenticate and set context
        uses: redhat-actions/oc-login@v1

        with:
          # URL to your OpenShift cluster.
          # Refer to Step 2.
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}


          # Credentials, if desired instead of token
          # Username and password override token if they are set.
          openshift_username: ${{ secrets.TEST_USER }}
          openshift_password: ${{ secrets.OPENSHIFT_PASSWORD }}

          # Disables SSL cert checking. Use this if you don't have the certificate authority data.
          insecure_skip_tls_verify: true
          # This method is more secure, if the certificate from Step 4 is available.
          certificate_authority_data: ${{ secrets.CA_DATA }}

          # Optional - this sets your Kubernetes context's current namespace after logging in.
          namespace: ${{ env.OPENSHIFT_NAMESPACE }}
       
      - name: Test
        run: |
          oc api-resources
          
      - name: Delete secret
        run: |
          oc delete secret config -n flex
          
      - name: Create secret
        run: |
          oc create secret generic config --from-file=config.yaml=config.yaml -n flex
          
      - name: Rollout
        run: |
          oc rollout restart deployment flexmulesoft -n flex

  Validate:
    runs-on: ubuntu-latest
    needs: Login
    if: ${{ success() }}
    steps:
    
       - uses: actions/checkout@v4 
       - name: Add hosts to /etc/hosts
         run: |
             sudo echo "64.23.160.96 api.crc.testing oauth-openshift.apps-crc.testing console-openshift-console.apps-crc.testing default-route-openshift-image-registry.apps-crc.testing flex-route-flex.apps-crc.testing downloads-openshift-console.apps-crc" | sudo tee -a /etc/hosts
      
       - name: REST API with curl
         run: |
            curl -X GET "http://flex-route-flex.apps-crc.testing/test"

          
          
              
            

       


            